#!/bin/bash

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
    # Being run directly, probably by test harness running entire dir.
    echo "1..0 # SKIP bash-itunes-test-functions isn't a test file"
    exit 0
fi

mocked_command_delimiter="===================="
mocked_commands="/tmp/bash_tap_mock_osascript.$$"

function record_sent_command() {
    echo "$*" >>$mocked_commands
    echo $mocked_command_delimiter >>$mocked_commands
}

function read_sent_commands() {
    i=0
    unset sent_commands
    if [ -f "$mocked_commands" ]; then
        while IFS='' read line; do
	    if [ "$line" = "$mocked_command_delimiter" ]; then
		i=$((i + 1))
	    else
		sent_commands[$i]="${sent_commands[$i]}$line\n"
	    fi
	done < $mocked_commands
    fi
}

function clear_sent_commands() {
    if [ -f "$mocked_commands" ]; then
        rm -f "$mocked_commands"
    else
        _bt_add_on_exit_cmd "rm -f '$mocked_commands'"
    fi
    touch "$mocked_commands"
}

# A default mock function, redefine for custom return values.
function mock_osascript() {
    record_sent_command "$*"
}

function dispatch_mocked_command() {
    clear_sent_commands
    mock_function "_osascript" "mock_osascript"
    start_output_capture

    _dispatch "$@"

    finish_output_capture stdout stderr
    restore_mocked_function "_osascript"
    read_sent_commands
}

function test_no_commands_sent() {
    local test_name="$1"

    if [ -n "$test_name" ]; then
        test_name="number of commands sent in $test_name should be zero"
    else
        test_name="number of commands sent should be zero"
    fi

    is "${#sent_commands[*]}" "0" "$test_name"
}

function regexp_quotemeta() {
    local str="$*"

    printf -v str "%q" "$str"
    str="${str//+/\\+}"
    str="${str//./\\.}"

    echo -n $str
}

tests_per_current_track_fetched=6
commands_per_current_track_fetched=3

function test_send_commands_current_track_fetch() {
    local first_idx="$1"
    local ordinal="$2"
    local test_name="$3"
    local second_idx=$((first_idx + 1));
    local third_idx=$((first_idx + 2));

    like "${sent_commands[$first_idx]}" 'of \(current track\)' "$ordinal sent command of $test_name should be fetch of 'current track'"
    like "${sent_commands[$first_idx]}" "tell application \"$itunes_app\"" "$ordinal sent command of $test_name should contain 'tell application \"$itunes_app\"'"
    like "${sent_commands[$second_idx]}" 'in current track' "next sent command of $test_name should be fetch of 'current track' location"
    like "${sent_commands[$second_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"
    like "${sent_commands[$third_idx]}" 'player position as integer' "next sent command of $test_name should contain 'player position as integer'"
    like "${sent_commands[$third_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"
}

tests_per_track_fetched=4
commands_per_track_fetched=2

function test_send_commands_track_fetch() {
    local first_idx="$1"
    local ordinal="$2"
    local track_specifier="$3"
    local test_name="$4"
    local second_idx=$((first_idx + 1));

    track_specifier=$(regexp_quotemeta "$track_specifier")

    like "${sent_commands[$first_idx]}" "of \\($track_specifier\\)" "$ordinal sent command of $test_name should be fetch of $track_specifier"
    like "${sent_commands[$first_idx]}" "tell application \"$itunes_app\"" "$ordinal sent command of $test_name should contain 'tell application \"$itunes_app\"'"
    like "${sent_commands[$second_idx]}" "in $track_specifier" "next sent command of $test_name should be fetch of $track_specifier location"
    like "${sent_commands[$second_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"
}

# special cases: full dataset, single quotes and double quotes to mess things up
mock_track_1_name="Kathy's Song (Come Lie Next To Me)"
mock_track_1_artist="Apoptygma Berzerk"
mock_track_1_album="Welcome To Earth \"Extra bit for testing\""
mock_track_1_year="2000"
mock_track_1_rating="100"
mock_track_1_loved="true"
mock_track_1_time="6:35"
mock_track_1_id="10611"
mock_track_1_data="$mock_track_1_name
$mock_track_1_artist
$mock_track_1_album
$mock_track_1_year
$mock_track_1_rating
$mock_track_1_loved
$mock_track_1_time
$mock_track_1_id"

# special cases: no track rating
mock_track_2_name="Naked (God Module RMX)"
mock_track_2_artist="Assemblage 23"
mock_track_2_album="Addendum"
mock_track_2_year="2001"
mock_track_2_rating="0"
mock_track_2_loved="false"
mock_track_2_time="5:22"
mock_track_2_id="15192"
mock_track_2_data="$mock_track_2_name
$mock_track_2_artist
$mock_track_2_album
$mock_track_2_year
$mock_track_2_rating
$mock_track_2_loved
$mock_track_2_time
$mock_track_2_id"

# special cases: no track year
mock_track_3_name="Sapphire"
mock_track_3_artist="Ayria"
mock_track_3_album="Debris"
mock_track_3_year="0"
mock_track_3_rating="100"
mock_track_3_loved="true"
mock_track_3_time="6:14"
mock_track_3_id="14151"
mock_track_3_data="$mock_track_3_name
$mock_track_3_artist
$mock_track_3_album
$mock_track_3_year
$mock_track_3_rating
$mock_track_3_loved
$mock_track_3_time
$mock_track_3_id"

# special cases: no track year
mock_track_4_name="KathyÂ´s Song (Come Lie Next To Me)"
mock_track_4_artist="Apoptygma Berzerk"
mock_track_4_album="Apbl2000"
mock_track_4_year="2007"
mock_track_4_rating="0"
mock_track_4_loved="false"
mock_track_4_time="6:57"
mock_track_4_id="15169"
mock_track_4_data="$mock_track_4_name
$mock_track_4_artist
$mock_track_4_album
$mock_track_4_year
$mock_track_4_rating
$mock_track_4_loved
$mock_track_4_time
$mock_track_4_id"


tests_per_track_displayed=5

function test_track_displayed() {
    local output="$1"
    local track_variable_prefix="$2"
    local test_name="$3"
    local verbose="$4"

    # I kid you not.
    #   eval is to get the symbolic reference to the real variables.
    #   regexp_quotemeta is to escape special characters for the "like"
    #   regexp matching in the absence of \Q...\E support in bash

    eval "local track_name=\$${track_variable_prefix}_name"
    track_name=$(regexp_quotemeta "$track_name")
    eval "local track_artist=\$${track_variable_prefix}_artist"
    track_artist=$(regexp_quotemeta "$track_artist")
    eval "local track_album=\$${track_variable_prefix}_album"
    track_album=$(regexp_quotemeta "$track_album")
    eval "local track_year=\$${track_variable_prefix}_year"
    track_year=$(regexp_quotemeta "$track_year")
    eval "local track_rating=\$${track_variable_prefix}_rating"
    track_rating=$(regexp_quotemeta "$track_rating")
    eval "local track_time=\$${track_variable_prefix}_time"
    track_time=$(regexp_quotemeta "$track_time")
    eval "local track_id=\$${track_variable_prefix}_id"
    track_id=$(regexp_quotemeta "$track_id")

    like "$output" "\"$track_name\"" "$test_name should contain track name '\"$track_name\"'"
    like "$output" "by $track_artist" "$test_name should contain track artist 'by $track_artist'"
    like "$output" "from \"$track_album\"" "$test_name should contain track album 'from \"$track_album\"'"
    like "$output" "\(([0-9]+:[0-9][0-9] of )?$track_time\)" "$test_name should contain track time '($track_time)' or '(m:ss of $track_time)'"

    if [[ -n "$verbose" && -n "$track_rating" && "$track_rating" > "0" ]]; then
        rating=$((track_rating / 20))
        like "$output" "You've rated this track $rating out of 5\\." "$test_name should contain track rating 'You've rated this track $rating out of 5.'"
    else
        unlike "$output" "You've rated this track " "$test_name should not contain track rating 'You've rated this track ...'"
    fi
}

tests_per_playlist_fetched=9
commands_per_playlist_fetched=4

function test_send_commands_playlist_fetch() {
    local first_idx="$1"
    local ordinal="$2"
    local playlist_specifier="$3"
    local test_name="$4"
    local second_idx=$((first_idx + 1));
    local third_idx=$((first_idx + 2));
    local fourth_idx=$((first_idx + 3));

    playlist_specifier=$(regexp_quotemeta "$playlist_specifier")

    # First command is fetch of playlist details
    like "${sent_commands[$first_idx]}" "of \\($playlist_specifier\\)" "$ordinal sent command of $test_name should be fetch of $playlist_specifier"
    like "${sent_commands[$first_idx]}" "tell application \"$itunes_app\"" "$ordinal sent command of $test_name should contain 'tell application \"$itunes_app\"'"

    # Second command is fetch of number of tracks
    like "${sent_commands[$second_idx]}" "in $playlist_specifier" "next sent command of $test_name should loop over the matching playlists"
    like "${sent_commands[$second_idx]}" "\(count tracks\)" "next sent command of $test_name should count tracks for each matching playlist"
    like "${sent_commands[$second_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"

    # Third command is fetch of track details
    like "${sent_commands[$third_idx]}" "of \\(every track of $playlist_specifier\\)" "next sent command of $test_name should be fetch of tracks in the playlist"
    like "${sent_commands[$third_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"

    # Fourth command is fetch of track location
    like "${sent_commands[$fourth_idx]}" "in every track of $playlist_specifier" "next sent command of $test_name should be fetch of location of tracks in the playlist"
    like "${sent_commands[$fourth_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"
}

tests_per_current_playlist_fetched="$tests_per_playlist_fetched"
commands_per_current_playlist_fetched="$commands_per_playlist_fetched"

function test_send_commands_current_playlist_fetch() {
    local first_idx="$1"
    local ordinal="$2"
    local test_name="$3"

    test_send_commands_playlist_fetch "$first_idx" "$ordinal" "current playlist" "$test_name"
}

# special cases: full dataset, special characters
mock_playlist_1_name="c Synth+Ind \"Some quotes for good measure\", it's trying to break things"
mock_playlist_1_time="7:18:19:41"
mock_playlist_1_id="28243"
# Just to be awkward, this data is interleaved
mock_playlist_1_tracks="$mock_track_1_name
$mock_track_2_name
$mock_track_3_name
$mock_track_4_name
$mock_track_1_artist
$mock_track_2_artist
$mock_track_3_artist
$mock_track_4_artist
$mock_track_1_album
$mock_track_2_album
$mock_track_3_album
$mock_track_4_album
$mock_track_1_year
$mock_track_2_year
$mock_track_3_year
$mock_track_4_year
$mock_track_1_rating
$mock_track_2_rating
$mock_track_3_rating
$mock_track_4_rating
$mock_track_1_loved
$mock_track_2_loved
$mock_track_3_loved
$mock_track_4_loved
$mock_track_1_time
$mock_track_2_time
$mock_track_3_time
$mock_track_4_time
$mock_track_1_id
$mock_track_2_id
$mock_track_3_id
$mock_track_4_id"
mock_playlist_1_count="4"
mock_playlist_1_data="$mock_playlist_1_name
$mock_playlist_1_time
$mock_playlist_1_id"

# special cases: full dataset, special characters
mock_playlist_2_name="c Synth+Ind (Great)"
mock_playlist_2_time="2:15:41:34"
mock_playlist_2_id="30716"
# Just to be awkward, this data is interleaved
mock_playlist_2_tracks="$mock_track_1_name
$mock_track_3_name
$mock_track_1_artist
$mock_track_3_artist
$mock_track_1_album
$mock_track_3_album
$mock_track_1_year
$mock_track_3_year
$mock_track_1_rating
$mock_track_3_rating
$mock_track_1_loved
$mock_track_3_loved
$mock_track_1_time
$mock_track_3_time
$mock_track_1_id
$mock_track_3_id"
mock_playlist_2_count="2"
mock_playlist_2_data="$mock_playlist_2_name
$mock_playlist_2_time
$mock_playlist_2_id"

tests_per_playlist_displayed=3

function test_playlist_displayed() {
    local output="$1"
    local playlist_variable_prefix="$2"
    local test_name="$3"
    local verbose="$4"

    # I kid you not.
    #   eval is to get the symbolic reference to the real variables.
    #   regexp_quotemeta is to escape special characters for the "like"
    #   regexp matching in the absence of \Q...\E support in bash

    eval "local playlist_name=\$${playlist_variable_prefix}_name"
    playlist_name=$(regexp_quotemeta "$playlist_name")
    eval "local playlist_time=\$${playlist_variable_prefix}_time"
    playlist_time=$(regexp_quotemeta "$playlist_time")
    eval "local playlist_id=\$${playlist_variable_prefix}_id"
    playlist_id=$(regexp_quotemeta "$playlist_id")
    eval "local playlist_count=\$${playlist_variable_prefix}_count"
    playlist_count=$(regexp_quotemeta "$playlist_count")

    like "$output" "\\\"$playlist_name\\\"" "$test_name should contain playlist name '\"$playlist_name\"'"
    like "$output" "\($playlist_time\)" "$test_name should contain playlist time '($playlist_time)'"
    like "$output" "\($playlist_count tracks?\)" "$test_name should contain playlist track count '($playlist_count)'"
}

tests_per_search_fetched=6
commands_per_search=2

function test_send_commands_search_fetch() {
    local first_idx="$1"
    local ordinal="$2"
    local search_term="$3"
    local search_restriction="$4"
    local test_name="$5"
    local second_idx=$((first_idx + 1));

    search_term=$(regexp_quotemeta "$search_term")
    search_restriction=$(regexp_quotemeta "$search_restriction")

    # First command is the search
    like "${sent_commands[$first_idx]}" "search playlist \"Library\" for \"$search_term\"" "$ordinal sent command of $test_name should contain search for '$search_term'"
    like "${sent_commands[$first_idx]}" "$search_restriction" "$ordinal sent command of $test_name should restrict search to '$search_restriction'"
    like "${sent_commands[$first_idx]}" "tell application \"$itunes_app\"" "$ordinal sent command of $test_name should contain 'tell application \"$itunes_app\"'"

    # Second command is the location fetch
    like "${sent_commands[$second_idx]}" "search playlist \"Library\" for \"$search_term\"" "next sent command of $test_name should contain search for '$search_term'"
    like "${sent_commands[$second_idx]}" "$search_restriction" "next sent command of $test_name should restrict search to '$search_restriction'"
    like "${sent_commands[$second_idx]}" "tell application \"$itunes_app\"" "next sent command of $test_name should contain 'tell application \"$itunes_app\"'"
}

